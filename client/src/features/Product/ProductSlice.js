import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  addToCart,
  deleteFromCart,
  getAllProducts,
  getProductById,
  loginUser,
} from "./ProductAPI";

const initialState = {
  status: "idle",
  user: null,
  error: null,
  products : null,
  product : null,
  cart : null,
};

export const loginUserAsync = createAsyncThunk(
  "user/loginUser",
  async (userData) => {
    try {
      const response = await loginUser(userData);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    } catch (error) {
      const response = await loginUser(userData);
      return response.error;
    }
  }
);

export const getAllProductsAsync = createAsyncThunk(
  "user/getAllProducts",
  async () => {
    try {
      const response = await getAllProducts();
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    } catch (error) {
      const response = await getAllProducts();
      return response.error;
    }
  }
);

export const getProductByIdAsync = createAsyncThunk(
  "user/getProductById",
  async (id) => {
    try {
      const response = await getProductById(id);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    } catch (error) {
      const response = await getProductById(id);
      return response.error;
    }
  }
);

export const addToCartAsync = createAsyncThunk(
  "user/addToCart",
  async (userData) => {
    try {
      const response = await addToCart(userData);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    } catch (error) {
      const response = await addToCart(userData);
      return response.error;
    }
  }
);

export const deleteFromCartAsync = createAsyncThunk(
  "user/deleteFromCart",
  async (userData) => {
    try {
      const response = await deleteFromCart(userData);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    } catch (error) {
      const response = await deleteFromCart(userData);
      return response.error;
    }
  }
);

export const ProductSlice = createSlice({
  name: "Product",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user += action.payload;
      })
      .addCase(loginUserAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error += action.error.message;
      })
      .addCase(getAllProductsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAllProductsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.products = action.payload;
      })
      .addCase(getAllProductsAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error += action.error.message;
      })
      .addCase(addToCartAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addToCartAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user += action.payload;
      })
      .addCase(addToCartAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error += action.error.message;
      })
      .addCase(deleteFromCartAsync.pending, (state) => {
        state.status = "loading";
        state.error = null;
        state.user = null;
      })
      .addCase(deleteFromCartAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.error = null;
        state.user = null;
      })
      .addCase(deleteFromCartAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error += action.error.message;
      })
      .addCase(getProductByIdAsync.pending, (state) => {
        state.status = "loading";
        state.error = null;
      })
      .addCase(getProductByIdAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.error = null;
        state.product = action.payload;
      })
      .addCase(getProductByIdAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error += action.error.message;
      });
  },
});

export const { increment, decrement, incrementByAmount } = ProductSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.Product.value)`
export const selectCount = (state) => state.Product.value;
export const selectProducts = (state) => state.Product.products;
export const selectProduct = (state) => state.Product.product;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default ProductSlice.reducer;
